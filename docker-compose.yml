# A股量化选股推荐系统 - Docker Compose配置
# 提供完整的容器化部署方案

version: '3.8'

services:
  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: stock-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - stock-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # 后端服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: stock-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # 基础配置
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      
      # 数据源配置
      - TUSHARE_TOKEN=${TUSHARE_TOKEN:-your_tushare_token_here}
      - AKSHARE_ENABLED=true
      
      # 缓存配置
      - REDIS_ENABLED=true
      - REDIS_URL=redis://redis:6379/0
      - CACHE_EXPIRE_MINUTES=30
      
      # 日志配置
      - LOG_LEVEL=INFO
      - LOG_FILE=logs/app.log
      
      # AI配置
      - AI_DEFAULT_PROVIDER=mock
      - AI_ENABLED_PROVIDERS=["mock"]
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
    volumes:
      - ./backend/logs:/app/backend/logs
      - ./data:/app/backend/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - stock-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: stock-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - stock-network
    profiles:
      - production

# 开发环境配置
  # 开发环境后端
  backend-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: stock-backend-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "3000:3000"
    environment:
      # 基础配置
      - DEBUG=true
      - HOST=0.0.0.0
      - PORT=8000
      
      # 数据源配置
      - TUSHARE_TOKEN=${TUSHARE_TOKEN:-your_tushare_token_here}
      - AKSHARE_ENABLED=true
      
      # 缓存配置
      - REDIS_ENABLED=true
      - REDIS_URL=redis://redis:6379/0
      - CACHE_EXPIRE_MINUTES=30
      
      # 日志配置
      - LOG_LEVEL=DEBUG
      - LOG_FILE=logs/app.log
      
      # AI配置
      - AI_DEFAULT_PROVIDER=mock
      - AI_ENABLED_PROVIDERS=["mock"]
    volumes:
      - .:/app
      - /app/frontend/node_modules
      - /app/backend/venv
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - stock-network
    profiles:
      - development

# 网络配置
networks:
  stock-network:
    driver: bridge
    name: stock-network

# 数据卷配置
volumes:
  redis_data:
    driver: local
    name: stock-redis-data