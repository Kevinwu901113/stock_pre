version: '3.8'

services:
  # 后端API服务
  backend:
    build: ./backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/stock_db
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./strategies:/app/strategies
      - ./config:/app/config
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - stock-network

  # 前端服务
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev -- --host 0.0.0.0
    networks:
      - stock-network

  # PostgreSQL数据库
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=stock_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stock-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - stock-network

  # 数据同步服务
  data-sync:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/stock_db
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./strategies:/app/strategies
      - ./config:/app/config
    command: python scripts/data_sync.py
    networks:
      - stock-network

  # Nginx反向代理(生产环境)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend
    networks:
      - stock-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  stock-network:
    driver: bridge